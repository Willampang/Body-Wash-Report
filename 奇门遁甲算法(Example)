class QiMenDunJiaCalculator {
  constructor() {
    this.tianGan = ['甲','乙','丙','丁','戊','己','庚','辛','壬','癸'];
    this.diZhi = ['子','丑','寅','卯','辰','巳','午','未','申','酉','戌','亥'];
    this.baMen = ['休门','死门','伤门','杜门','中宫','开门','惊门','生门','景门'];
    this.jiuXing = ['天蓬','天芮','天冲','天辅','天禽','天心','天柱','天任','天英'];
    this.jiuShen = ['直符','螣蛇','太阴','六合','白虎','玄武','九地','九天','太常'];
    this.jiuGong = ['乾六宫','坎一宫','艮八宫','震三宫','中五宫','兑七宫','巽四宫','离九宫','坤二宫'];

    this.jieQiJuShu = {
      '冬至':1,'小寒':1,'大寒':1,'立春':2,'雨水':2,'惊蛰':2,'春分':3,'清明':3,'谷雨':3,
      '立夏':4,'小满':4,'芒种':4,'夏至':5,'小暑':5,'大暑':5,'立秋':6,'处暑':6,'白露':6,
      '秋分':7,'寒露':7,'霜降':7,'立冬':8,'小雪':8,'大雪':8
    };

    this.goldCardMap = {
      "兑": "兑宫","艮": "艮宫","坎": "坎宫","坤": "坤宫",
      "离": "离宫","乾": "乾宫","巽": "巽宫","震": "震宫"
    };
  }

  calculateQiMen(year, month, day, hour, minute = 0) {
    const basicInfo = this.getBasicInfo(year, month, day, hour, minute);
    const juShu = this.getJuShu(basicInfo.jieQi, basicInfo.isYangDun);
    const zhiFuZhiShi = this.getZhiFuZhiShi(basicInfo.jiaZi, juShu);
    const jiuGongJu = this.arrangeJiuGong(juShu, zhiFuZhiShi);

    return {
      basicInfo,
      juShu,
      zhiFuZhiShi,
      jiuGongJu,
      interpretation: this.getInterpretation(jiuGongJu, basicInfo),
      goldCard: this.getGoldCard(jiuGongJu)
    };
  }

  getBasicInfo(year, month, day, hour, minute) {
    const date = new Date(year, month - 1, day, hour, minute);
    const jieQi = this.getJieQi(month, day);
    const isYangDun = this.isYangDun(jieQi);
    const jiaZi = (year + month + day + hour) % 60;
    return { date, jieQi, isYangDun, jiaZi, dunJia: isYangDun ? '阳遁' : '阴遁' };
  }

  getJieQi(month, day) {
    const jieQiMap = {
      1: '小寒',2: '雨水',3: '春分',4: '谷雨',
      5: '立夏',6: '夏至',7: '大暑',8: '处暑',
      9: '秋分',10: '霜降',11: '小雪',12: '冬至'
    };
    return jieQiMap[month] || '未知';
  }

  isYangDun(jieQi) {
    const yangDunJieQi = ['冬至','小寒','大寒','立春','雨水','惊蛰','春分','清明','谷雨'];
    return yangDunJieQi.includes(jieQi);
  }

  getJuShu(jieQi, isYangDun) {
    let ju = this.jieQiJuShu[jieQi] || 1;
    return isYangDun ? ju : 9 - (ju - 1);
  }

  getZhiFuZhiShi(jiaZi, juShu) {
    const zhiFuIndex = jiaZi % this.jiuShen.length;
    const zhiShiIndex = (jiaZi + juShu) % this.baMen.length;
    return { zhiFu: this.jiuShen[zhiFuIndex], zhiShi: this.baMen[zhiShiIndex] };
  }

  arrangeJiuGong(juShu, zhiFuZhiShi) {
    return this.jiuGong.map((gong, i) => {
      const gongName = gong.replace(/[0-9宫六八三五七四九二]/g, "");
      return {
        gongWei: gong,
        men: this.baMen[(i + juShu) % this.baMen.length],
        xing: this.jiuXing[(i + juShu) % this.jiuXing.length],
        shen: this.jiuShen[(i + juShu) % this.jiuShen.length],
        goldCard: this.goldCardMap[gongName] || ""
      };
    });
  }

  getGoldCard(jiuGongJu) {
    const zhiFuGong = jiuGongJu.find(g => g.shen === "直符");
    return zhiFuGong ? zhiFuGong.goldCard : "";
  }

  getInterpretation(jiuGongJu, basicInfo) {
    const zhiFuGong = jiuGongJu.find(g => g.shen === "直符");
    let advice = "宜顺势而为，择吉方行动";

    if (zhiFuGong) {
      switch (zhiFuGong.goldCard) {
        case "乾宫": advice = "宜开拓进取，适合创业或掌权"; break;
        case "坎宫": advice = "宜静守学习，适合研究与规划"; break;
        case "艮宫": advice = "宜积累沉淀，适合投资与储蓄"; break;
        case "震宫": advice = "宜行动突破，适合营销与谈判"; break;
        case "巽宫": advice = "宜交流合作，适合谈判与社交"; break;
        case "离宫": advice = "宜宣传推广，适合文艺与传播"; break;
        case "坤宫": advice = "宜谦逊包容，适合养生与人和"; break;
        case "兑宫": advice = "宜享乐交际，适合娱乐与聚会"; break;
      }
    }

    return {
      overall: `${basicInfo.dunJia}${basicInfo.jieQi}局，整体能量平衡`,
      advice
    };
  }
}

// ================================
// Google Sheets 集成
// ================================

function onEdit(e) {
  const sheet = e.source.getActiveSheet();
  const row = e.range.getRow();
  if (row < 2) return;
  if (e.range.getColumn() <= 3) { // 只监听 A-C 三栏
    calculateAndFillQiMen(sheet, row);
  }
}

function calculateAndFillQiMen(sheet, row) {
  const birthday = sheet.getRange(row, 1).getValue(); // A 栏：日期
  const hour = sheet.getRange(row, 2).getValue();     // B 栏：时
  const minute = sheet.getRange(row, 3).getValue() || 0; // C 栏：分

  if (!birthday || hour === '') return;

  const date = new Date(birthday);
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();

  const calculator = new QiMenDunJiaCalculator();
  const result = calculator.calculateQiMen(year, month, day, hour, minute);

  sheet.getRange(row, 4).setValue(result.basicInfo.dunJia);       // 阴阳遁
  sheet.getRange(row, 5).setValue(result.juShu);                  // 局数
  sheet.getRange(row, 6).setValue(result.zhiFuZhiShi.zhiFu);      // 值符
  sheet.getRange(row, 7).setValue(result.zhiFuZhiShi.zhiShi);     // 值使
  sheet.getRange(row, 8).setValue(result.basicInfo.jieQi);        // 节气
  sheet.getRange(row, 9).setValue(result.interpretation.overall); // 整体解读
  sheet.getRange(row, 10).setValue(result.interpretation.advice); // 行动建议
  sheet.getRange(row, 11).setValue(result.goldCard);              // 黄金卡
}

function setupQiMenHeaders() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const headers = [
    '生日','时','分',
    '阴阳遁','局数','值符','值使','节气',
    '整体解读','行动建议','黄金卡'
  ];
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
}

function QIMEN(birthday, hour, minute) {
  const date = new Date(birthday);
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();

  const calculator = new QiMenDunJiaCalculator();
  const r = calculator.calculateQiMen(year, month, day, hour, minute || 0);
  return `遁甲:${r.basicInfo.dunJia}, 局数:${r.juShu}, 值符:${r.zhiFuZhiShi.zhiFu}, 黄金卡:${r.goldCard}`;
}

function QIMEN_ANALYSIS(birthday, hour, minute) {
  const date = new Date(birthday);
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();

  const calculator = new QiMenDunJiaCalculator();
  const r = calculator.calculateQiMen(year, month, day, hour, minute || 0);
  return JSON.stringify(r);
}
