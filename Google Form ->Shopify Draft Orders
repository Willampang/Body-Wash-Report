class QiMenDunJiaCalculator {
  constructor() {
    this.tianGan = ['甲','乙','丙','丁','戊','己','庚','辛','壬','癸'];
    this.diZhi = ['子','丑','寅','卯','辰','巳','午','未','申','酉','戌','亥'];
    this.baMen = ['休门','死门','伤门','杜门','中宫','开门','惊门','生门','景门'];
    this.jiuXing = ['天蓬','天芮','天冲','天辅','天禽','天心','天柱','天任','天英'];
    this.jiuShen = ['直符','螣蛇','太阴','六合','白虎','玄武','九地','九天','太常'];
    this.jiuGong = ['乾六宫','坎一宫','艮八宫','震三宫','中五宫','兑七宫','巽四宫','离九宫','坤二宫'];
    this.jieQiJuShu = {
      '冬至':1,'小寒':1,'大寒':1,'立春':2,'雨水':2,'惊蛰':2,'春分':3,'清明':3,'谷雨':3,
      '立夏':4,'小满':4,'芒种':4,'夏至':5,'小暑':5,'大暑':5,'立秋':6,'处暑':6,'白露':6,
      '秋分':7,'寒露':7,'霜降':7,'立冬':8,'小雪':8,'大雪':8
    };
    this.goldCardMap = {
      "乾": "乾宫","坎": "坎宫","艮": "艮宫","震": "震宫",
      "巽": "巽宫","离": "离宫","坤": "坤宫","兑": "兑宫"
    };
  }

  calculateQiMen(year, month, day, hour, minute = 0) {
    try {
      if (!this.isValidDate(year, month, day)) {
        throw new Error(`Invalid date: ${year}-${month}-${day}`);
      }
      
      const basicInfo = this.getBasicInfo(year, month, day, hour, minute);
      const juShu = this.getJuShu(basicInfo.jieQi, basicInfo.isYangDun);
      const zhiFuZhiShi = this.getZhiFuZhiShi(basicInfo.jiaZi, juShu);
      const jiuGongJu = this.arrangeJiuGong(juShu, zhiFuZhiShi);
      const goldCard = this.getGoldCard(jiuGongJu);
      
      return {
        goldCard: goldCard,
        debug: { basicInfo, juShu, zhiFuZhiShi, jiuGongJu }
      };
    } catch (error) {
      return { goldCard: null, error: error.message };
    }
  }

  isValidDate(year, month, day) {
    if (year < 1900 || year > 2100) return false;
    if (month < 1 || month > 12) return false;
    if (day < 1 || day > 31) return false;
    
    const date = new Date(year, month - 1, day);
    return date.getFullYear() === year && 
           date.getMonth() === month - 1 && 
           date.getDate() === day;
  }

  getBasicInfo(year, month, day, hour, minute) {
    const date = new Date(year, month - 1, day, hour, minute);
    const jieQi = this.getJieQi(month, day);
    const isYangDun = this.isYangDun(jieQi);
    const jiaZi = this.getJiaZi(year, month, day, hour);
    
    return { date, jieQi, isYangDun, jiaZi };
  }

  getJiaZi(year, month, day, hour) {
    try {
      const baseDate = new Date(1900, 0, 31);
      const currentDate = new Date(year, month - 1, day);
      
      const daysDiff = Math.floor((currentDate.getTime() - baseDate.getTime()) / (1000 * 60 * 60 * 24));
      const chineseHour = Math.floor((hour + 1) / 2) % 12;
      const totalUnits = daysDiff * 12 + chineseHour;
      const jiaZiIndex = ((totalUnits % 60) + 60) % 60;
      
      return jiaZiIndex;
    } catch (error) {
      return 0;
    }
  }

  getJieQi(month, day) {
    const jieQiMap = {
      1: day < 20 ? '小寒' : '大寒',
      2: day < 19 ? '大寒' : '立春',
      3: day < 21 ? '惊蛰' : '春分',
      4: day < 20 ? '清明' : '谷雨',
      5: day < 21 ? '立夏' : '小满',
      6: day < 21 ? '芒种' : '夏至',
      7: day < 23 ? '小暑' : '大暑',
      8: day < 23 ? '立秋' : '处暑',
      9: day < 23 ? '白露' : '秋分',
      10: day < 23 ? '寒露' : '霜降',
      11: day < 22 ? '立冬' : '小雪',
      12: day < 22 ? '大雪' : '冬至'
    };
    return jieQiMap[month] || '春分';
  }

  isYangDun(jieQi) {
    const yangDunJieQi = ['冬至','小寒','大寒','立春','雨水','惊蛰','春分','清明','谷雨'];
    return yangDunJieQi.includes(jieQi);
  }

  getJuShu(jieQi, isYangDun) {
    let ju = this.jieQiJuShu[jieQi] || 1;
    return isYangDun ? ju : (9 - ju + 1);
  }

  getZhiFuZhiShi(jiaZi, juShu) {
    const zhiFuIndex = jiaZi % this.jiuShen.length;
    const zhiShiIndex = jiaZi % this.baMen.length;
    return { 
      zhiFu: this.jiuShen[zhiFuIndex], 
      zhiShi: this.baMen[zhiShiIndex] 
    };
  }

  arrangeJiuGong(juShu, zhiFuZhiShi) {
    return this.jiuGong.map((gong, i) => {
      const gongName = this.extractGongName(gong);
      const menIndex = (i + juShu - 1) % this.baMen.length;
      const xingIndex = (i + juShu - 1) % this.jiuXing.length;
      const shenIndex = (i + juShu - 1) % this.jiuShen.length;
      
      return {
        gongWei: gong,
        men: this.baMen[menIndex],
        xing: this.jiuXing[xingIndex],
        shen: this.jiuShen[shenIndex],
        gongName: gongName,
        goldCard: this.goldCardMap[gongName] || ""
      };
    });
  }

  extractGongName(gong) {
    const nameMap = {
      '乾六宫': '乾', '坎一宫': '坎', '艮八宫': '艮', '震三宫': '震',
      '中五宫': '中', '兑七宫': '兑', '巽四宫': '巽', '离九宫': '离', '坤二宫': '坤'
    };
    return nameMap[gong] || gong.charAt(0);
  }

  getGoldCard(jiuGongJu) {
    const zhiFuGong = jiuGongJu.find(g => g.shen === "直符");
    if (!zhiFuGong) {
      return null;
    }
    return zhiFuGong.goldCard || null;
  }
}

function parseTimeInput(birthHour) {
  if (!birthHour) return { hour: 0, minute: 0 };
  
  try {
    const hourStr = String(birthHour).trim();
    let h = 0, m = 0;

    if (hourStr.match(/^\d{1,2}:\d{2}:\d{2}$/)) {
      const parts = hourStr.split(":");
      h = parseInt(parts[0], 10) || 0;
      m = parseInt(parts[1], 10) || 0;
      return { hour: Math.max(0, Math.min(23, h)), minute: Math.max(0, Math.min(59, m)) };
    }

    if (hourStr.match(/^\d{1,2}:\d{2}$/)) {
      const parts = hourStr.split(":");
      h = parseInt(parts[0], 10) || 0;
      m = parseInt(parts[1], 10) || 0;
      return { hour: Math.max(0, Math.min(23, h)), minute: Math.max(0, Math.min(59, m)) };
    }

    if (hourStr.match(/^\d{1,2}$/)) {
      h = parseInt(hourStr, 10) || 0;
      return { hour: Math.max(0, Math.min(23, h)), minute: 0 };
    }

    let isPM = /pm|下午/i.test(hourStr);
    let isAM = /am|上午/i.test(hourStr);
    const cleanHour = hourStr.replace(/[apm\.上下午\s]/gi, '');
    h = parseInt(cleanHour, 10) || 0;
    
    if (isPM && h < 12) h += 12;
    if (isAM && h === 12) h = 0;

    return { hour: Math.max(0, Math.min(23, h)), minute: 0 };
  } catch (error) {
    return { hour: 0, minute: 0 };
  }
}

function parseFlexibleBirthday(birthdayInput) {
  if (!birthdayInput) {
    return null;
  }
  
  try {
    if (birthdayInput instanceof Date) return birthdayInput;
    
    const dateStr = String(birthdayInput).trim();

    const ddmmyyyyMatch = dateStr.match(/^(\d{1,2})[\/\-\.](\d{1,2})[\/\-\.](\d{4})$/);
    if (ddmmyyyyMatch) {
      const day = parseInt(ddmmyyyyMatch[1], 10);
      const month = parseInt(ddmmyyyyMatch[2], 10);
      const year = parseInt(ddmmyyyyMatch[3], 10);
      
      if (year < 1900 || year > 2100 || month < 1 || month > 12 || day < 1 || day > 31) {
        return null;
      }
      
      const date = new Date(year, month - 1, day);
      if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {
        return null;
      }
      
      return date;
    }

    const yyyymmddMatch = dateStr.match(/^(\d{4})[\/\-\.](\d{1,2})[\/\-\.](\d{1,2})$/);
    if (yyyymmddMatch) {
      const year = parseInt(yyyymmddMatch[1], 10);
      const month = parseInt(yyyymmddMatch[2], 10);
      const day = parseInt(yyyymmddMatch[3], 10);
      
      if (year < 1900 || year > 2100 || month < 1 || month > 12 || day < 1 || day > 31) {
        return null;
      }
      
      const date = new Date(year, month - 1, day);
      if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {
        return null;
      }
      
      return date;
    }

    return null;
    
  } catch (error) {
    return null;
  }
}

function calculateQimenForBirthday(birthday, birthHour) {
  const date = parseFlexibleBirthday(birthday);
  if (!date) {
    return null;
  }
  
  const timeResult = parseTimeInput(birthHour);
  const h = timeResult.hour;
  const m = timeResult.minute;
  
  try {
    const calc = new QiMenDunJiaCalculator();
    const result = calc.calculateQiMen(
      date.getFullYear(), 
      date.getMonth() + 1, 
      date.getDate(), 
      h, 
      m
    );
    
    return result.goldCard;
  } catch (error) {
    return null;
  }
}

const SHOPIFY_STORE = 'ns6gks-k1.myshopify.com';
const ACCESS_TOKEN = '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';
const API_VERSION = '2024-01';

const GOLDEN_CARD_VARIANTS = {
  "乾宫": { variant_id: 51126213968004, price: "0.00", title: "乾宫" },
  "坎宫": { variant_id: 51126214033540, price: "0.00", title: "坎宫" },
  "艮宫": { variant_id: 51126214099076, price: "0.00", title: "艮宫" },
  "震宫": { variant_id: 51126214131844, price: "0.00", title: "震宫" },
  "巽宫": { variant_id: 51126214164612, price: "0.00", title: "巽宫" },
  "离宫": { variant_id: 51126214197380, price: "0.00", title: "离宫" },
  "坤宫": { variant_id: 51126214262916, price: "0.00", title: "坤宫" },
  "兑宫": { variant_id: 51126217670788, price: "0.00", title: "兑宫" }
};

// Helper function to get customer by email
function getCustomerByEmail(email) {
  try {
    const customerSearchUrl = `https://${SHOPIFY_STORE}/admin/api/${API_VERSION}/customers/search.json?query=email:${encodeURIComponent(email)}`;
    const searchOptions = {
      method: 'GET',
      headers: {
        'X-Shopify-Access-Token': ACCESS_TOKEN,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    };
    
    const searchResp = UrlFetchApp.fetch(customerSearchUrl, searchOptions);
    const searchResponseCode = searchResp.getResponseCode();
    const searchResponseText = searchResp.getContentText();
    
    if (searchResponseCode !== 200) {
      return { success: false, error: `Customer search failed: HTTP ${searchResponseCode} - ${searchResponseText}` };
    }
    
    const searchData = JSON.parse(searchResponseText);
    const customers = searchData.customers;
    
    if (!customers || customers.length === 0) {
      return { success: false, error: 'Customer not found with email: ' + email };
    }
    
    return { success: true, customer: customers[0] };
    
  } catch (e) {
    return { success: false, error: e.toString() };
  }
}

function addGoldenCardToCustomer(email, goldenCard) {
  try {
    const customerResult = getCustomerByEmail(email);
    if (!customerResult.success) {
      return customerResult;
    }
    
    const customer = customerResult.customer;
    const customerId = customer.id;
    
    const updateUrl = `https://${SHOPIFY_STORE}/admin/api/${API_VERSION}/customers/${customerId}.json`;
    
    const existingTags = customer.tags || '';
    const goldenCardTag = `golden-card-${goldenCard}`;
    const newTags = existingTags ? `${existingTags},${goldenCardTag}` : goldenCardTag;
    
    const updateData = {
      customer: {
        id: customerId,
        tags: newTags,
        note: customer.note ? 
          `${customer.note}\n\nGolden Card: ${goldenCard} (Auto-calculated)` : 
          `Golden Card: ${goldenCard} (Auto-calculated)`
      }
    };
    
    const updateOptions = {
      method: 'PUT',
      headers: {
        'X-Shopify-Access-Token': ACCESS_TOKEN,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      payload: JSON.stringify(updateData)
    };
    
    const updateResp = UrlFetchApp.fetch(updateUrl, updateOptions);
    const updateResponseCode = updateResp.getResponseCode();
    const updateResponseText = updateResp.getContentText();
    
    if (updateResponseCode === 200) {
      return { 
        success: true, 
        customerId: customerId,
        response: `Customer profile updated with golden card: ${goldenCard}` 
      };
    } else {
      return { 
        success: false, 
        error: `Customer update failed: HTTP ${updateResponseCode} - ${updateResponseText}` 
      };
    }
    
  } catch (e) {
    return { success: false, error: e.toString() };
  }
}

function getLatestOrderIdByEmail(email) {
  try {
    const customerResult = getCustomerByEmail(email);
    if (!customerResult.success) {
      return null;
    }
    
    const customerId = customerResult.customer.id;
    
    const ordersUrl = `https://${SHOPIFY_STORE}/admin/api/${API_VERSION}/orders.json?customer_id=${customerId}&status=any&limit=1&order=created_at desc`;
    const options = { 
      method: 'GET', 
      headers: { 
        'X-Shopify-Access-Token': ACCESS_TOKEN,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      } 
    };
    
    const ordersResp = UrlFetchApp.fetch(ordersUrl, options);
    const ordersResponseCode = ordersResp.getResponseCode();
    const ordersText = ordersResp.getContentText();
    
    if (ordersResponseCode !== 200) {
      return null;
    }
    
    const orders = JSON.parse(ordersText).orders;
    return orders && orders.length > 0 ? orders[0].id : null;
  } catch (e) {
    return null;
  }
}

function createDraftOrderWithGoldenCard(customerId, goldenCard, relatedOrderId = null) {
  const variantInfo = GOLDEN_CARD_VARIANTS[goldenCard];
  if (!variantInfo) {
    return { success: false, error: "Unknown golden card: " + goldenCard };
  }
  
  try {
    const draftOrderUrl = `https://${SHOPIFY_STORE}/admin/api/${API_VERSION}/draft_orders.json`;
    
    // Create the note based on whether we have a related order
    let note = `Golden card ${goldenCard} - Auto-calculated based on birth information`;
    let tags = `golden-card,${goldenCard},auto-generated`;
    
    if (relatedOrderId) {
      note += `. Related to order #${relatedOrderId}`;
      tags += `,related-to-${relatedOrderId}`;
    }
    
    const draftOrderData = {
      draft_order: {
        line_items: [{
          variant_id: parseInt(variantInfo.variant_id),
          quantity: 1,
          price: variantInfo.price,
          title: `${variantInfo.title} - Complementary Golden Card`
        }],
        customer: {
          id: customerId
        },
        note: note,
        tags: tags,
        tax_exempt: true, // Since it's free
        use_customer_default_address: true
      }
    };
    
    const options = {
      method: 'POST',
      headers: {
        'X-Shopify-Access-Token': ACCESS_TOKEN,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      payload: JSON.stringify(draftOrderData)
    };
    
    const resp = UrlFetchApp.fetch(draftOrderUrl, options);
    const responseCode = resp.getResponseCode();
    const responseText = resp.getContentText();
    
    if (responseCode === 201) {
      const draftOrder = JSON.parse(responseText).draft_order;
      return { 
        success: true, 
        draftOrderId: draftOrder.id,
        draftOrderName: draftOrder.name,
        response: `Draft order created: ${draftOrder.name} (ID: ${draftOrder.id})` 
      };
    } else {
      return { 
        success: false, 
        error: `Draft order failed: HTTP ${responseCode} - ${responseText}` 
      };
    }
    
  } catch (e) {
    return { success: false, error: e.toString() };
  }
}

// Main function to handle golden card processing
function handleGoldenCardForCustomer(email, goldenCard, relatedOrderId = null) {
  try {
    // Step 1: Get customer info
    const customerResult = getCustomerByEmail(email);
    if (!customerResult.success) {
      return { success: false, error: customerResult.error };
    }
    
    const customerId = customerResult.customer.id;
    const results = [];
    
    // Step 2: Update customer profile
    const customerUpdateResult = addGoldenCardToCustomer(email, goldenCard);
    if (customerUpdateResult.success) {
      results.push("Customer profile updated");
    } else {
      results.push("Customer update failed: " + customerUpdateResult.error);
    }
    
    // Step 3: Create draft order
    const draftOrderResult = createDraftOrderWithGoldenCard(customerId, goldenCard, relatedOrderId);
    if (draftOrderResult.success) {
      results.push(`Draft order created: ${draftOrderResult.draftOrderName}`);
      return {
        success: true,
        customerId: customerId,
        draftOrderId: draftOrderResult.draftOrderId,
        draftOrderName: draftOrderResult.draftOrderName,
        response: results.join(" | ")
      };
    } else {
      results.push("Draft order failed: " + draftOrderResult.error);
      return {
        success: customerUpdateResult.success, // At least customer was updated
        customerId: customerId,
        response: results.join(" | "),
        warning: "Draft order creation failed"
      };
    }
    
  } catch (e) {
    return { success: false, error: e.toString() };
  }
}

function onFormSubmit(e) {
  try {
    // ✅ Get or create "Sheet1"
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Sheet1") 
      || SpreadsheetApp.getActiveSpreadsheet().insertSheet("Sheet1");

    // ✅ Add headers if first row is empty
    if (sheet.getLastRow() === 0) {
      sheet.appendRow([
        "Name","Email","Birthday","BirthHour","Shopify ID",
        "Golden Card","Status","Shopify Update","Draft Order","Timestamp"
      ]);
    }

    // ✅ Read form input
    const row = e.values;
    const name = row[1] || "";
    const email = row[2] || "";
    const birthday = row[3] || "";
    const birthHour = row[4] || "";
    let shopifyId = row[5] || ""; // can be blank if not provided

    // ✅ Calculate golden card
    let goldenCard = null;
    let status = "";
    try {
      goldenCard = calculateQimenForBirthday(birthday, birthHour);
      status = goldenCard 
        ? "Golden card calculated: " + goldenCard 
        : "Error: Could not calculate golden card";
    } catch (calcError) {
      status = "Error: " + calcError.message;
    }

    // ✅ Try to fetch Shopify Order ID if missing
    if (!shopifyId && email) {
      const latestOrderId = getLatestOrderIdByEmail(email);
      if (latestOrderId) {
        shopifyId = "#" + latestOrderId; // format like Shopify UI
      }
    }

    // ✅ Initialize status variables
    let shopifyUpdateStatus = "Not attempted";
    let draftOrderInfo = "Not created";

    // ✅ Process golden card if available
    if (goldenCard && email) {
      // Extract numeric order ID for reference
      const orderIdMatch = shopifyId.match(/\d+/);
      const numericOrderId = orderIdMatch ? orderIdMatch[0] : null;
      
      const result = handleGoldenCardForCustomer(email, goldenCard, numericOrderId);
      
      if (result.success) {
        shopifyUpdateStatus = "SUCCESS: " + result.response;
        if (result.draftOrderName) {
          draftOrderInfo = result.draftOrderName;
        }
        if (result.warning) {
          shopifyUpdateStatus += " (Warning: " + result.warning + ")";
        }
      } else {
        shopifyUpdateStatus = "FAILED: " + result.error;
      }
    } else if (goldenCard && !email) {
      shopifyUpdateStatus = "No email provided - cannot update Shopify";
    } else {
      shopifyUpdateStatus = "No golden card calculated - Shopify update skipped";
    }

    // ✅ Save results into Google Sheet
    sheet.appendRow([
      name, 
      email, 
      birthday, 
      birthHour, 
      shopifyId, 
      goldenCard, 
      status, 
      shopifyUpdateStatus, 
      draftOrderInfo,
      new Date()
    ]);

  } catch (e) {
    // ✅ Critical system-level error logging
    try {
      const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Sheet1");
      if (sheet) {
        sheet.appendRow([
          "SYSTEM ERROR", "", "", "", "", "", 
          "Critical system error: " + e.toString(), 
          "Failed", 
          "N/A",
          new Date()
        ]);
      }
    } catch (logError) {
      // silently continue if even logging fails
    }
    throw e;
  }
}
